scopeName: 'source.gcode'
name: 'G-code (FFF)'
fileTypes: [ 'gcode', 'gco', 'g' ]
patterns: [
	{ include: '#command' }
	{ include: '#checkedCommand' }
	{ include: '#script' }
	{ include: '#comment' }
]
repository:
	command: {
		begin: '(?i)^\\s*([GMT]\\d+)'
		beginCaptures:
			1: name: 'entity.name.function.gcode'
		end: '(?=;|$)'
		patterns: [{ include: '#parameter' }]
	}
	checkedCommand: {
		begin: '(?i)^\\s*(N)\\d+\\s'
		beginCaptures:
			1: name: 'keyword.control.line-number.gcode'
		end: '(\\*)\\d+(?=\\s*(;|$))'
		endCaptures:
			1: name: 'keyword.control.checksum.gcode'
		patterns: [{ include: '#command' }]
	}
	parameter: {
		patterns: [
			{
				#parameter name (single letter) followed by number
				match: '(?i)\\s([A-Z])(-?(?:\\d+(?:\\.\\d*)?|\\.\\d+))(?=\\s|;|$)'
				captures:
					1:
						patterns: [
							{
								match: '[Xx]'
								name: 'variable.parameter.dimension.x.gcode'
							}
							{
								match: '[Yy]'
								name: 'variable.parameter.dimension.y.gcode'
							}
							{
								match: '[Zz]'
								name: 'variable.parameter.dimension.z.gcode'
							}
							{
								match: '[Ee]'
								name: 'variable.parameter.dimension.filament.gcode'
							}
							{
								match: '[Ff]'
								name: 'variable.parameter.dimension.feed-rate.gcode'
							}
							{
								match: '(?i)[!XYZEF]'
								name: 'variable.parameter.gcode'
							}
						]
					2: name: 'constant.numeric.gcode'
			}
			{
				#parameter name (single letter) followed by quoted string
				match: '(?i)\\s([A-Z])(".*?(?:"".*?)*")(?=\\s|;|$)'
				captures:
					1: name: 'variable.parameter.gcode'
					2: name: 'string.quoted.double.gcode'
			}
			{
				#parameter name (single letter) followed by a slicer variable
				match: '(?i)\\s([A-Z])(\\[\\w+\\])(?=\\s|;|$)'
				captures:
					1: name: 'variable.parameter.gcode'
					2: name: 'support.variable.gcode'
			}
			{
				#flag (single letter)
				match: '(?i)\\s([A-Z])(?=\\s|;|$)'
				captures:
					1: name: 'variable.parameter.flag.gcode'
			}
			{
				#anything else (without scripts) is interpreted as an unquoted string, possibly containing slicer variables
				match: '\\s((?:[^\\s\\*\\[\\]\\{\\};]+|\\[\\w+\\])+(?:\\s(?:[^\\s\\*\\[\\]\\{\\};]+|\\[\\w+\\])+)*)(?=\\s*(;|$))'
				captures:
					1:
						name: 'string.unquoted.gcode'
						patterns: [
							{
								match: '\\[\\w+\\]'
								name: 'support.variable.gcode'
							}
						]
			}
			{
				#scripts are included, so it could be anything
				begin: '\\s'
				end: '(?=\\s*(;|$))'
				patterns: [{ include: '#script' }]
			}
		]
	}
	script: {
		#conditional statements, macros, snippets, host commands, etc.
		patterns: [
			{
				match: '\\{[^\\{\\}]*\\}'
				name: 'support.other.gcode'
			}
			{
				begin: '\\{[^\\{\\}]*(?=\\{)'
				end: '(?<=\\})[^\\{\\}]*\\}'
				patterns: [{ include: '#script' }]
				name: 'support.other.gcode'
			}
			{
				match: '@\\w+(?=\\s|;|$)'
				name: 'support.other.gcode'
			}
		]
	}
	comment: {
		match: ';.*'
		name: 'comment.line.semicolon.gcode'
	}
